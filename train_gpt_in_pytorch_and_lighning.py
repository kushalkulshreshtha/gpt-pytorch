# -*- coding: utf-8 -*-
"""Train GPT in PyTorch and Lighning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gApQGXmqdJ7oiZmRYfxzIMmMOyK0xcOL
"""

!pip install lightning
!pip install wandb

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import DataLoader
import lightning as L
import wandb
from pytorch_lightning.loggers import WandbLogger # Seems like old API is still retained in some shapes and forms
from lightning.pytorch.callbacks import ModelCheckpoint

wandb.login(key = 'redacted')

# Hyperparameters
batch_size = 64
context_length = 256
max_iters = 5000
learning_rate = 3e-4
eval_interval = 500
eval_iters = 200
n_embed = 384
n_layers = 6
n_heads = 6
dropout = 0.2
device = 'cuda' if torch.cuda.is_available() else 'cpu'

torch.manual_seed(32)

# We always start with a dataset to train on. Let's download the tiny shakespeare dataset
!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt

with open("input.txt", 'r', encoding='utf-8') as f:
    text = f.read()

print(text[:1000])

chars = sorted(list(set(text)))
vocab_size = len(chars)

idx_to_char = {idx: char for idx, char in enumerate(chars) }
char_to_idx = {char: idx for idx, char in enumerate(chars) }

encode = lambda x: [char_to_idx[i] for i in x]
decode = lambda x: ''.join([idx_to_char[i] for i in x])

# print((encode(text[:1000])))

data = torch.tensor(encode(text), dtype=torch.long)
n = int(0.9 * len(data))

train_data = data[:n]
val_data = data[n:]

x = train_data[: context_length]
y = train_data[1:context_length + 1]

# for i in range(context_length):
#     context = x[:i+1]
#     target = y[i]
#     print(f'for context ', context, '- target ',target)

class Head(nn.Module):
    """Single head of Attention"""
    def __init__(self, head_size):
        super().__init__()
        self.key = nn.Linear(n_embed, head_size, bias = False)
        self.query = nn.Linear(n_embed, head_size, bias = False)
        self.value = nn.Linear(n_embed, head_size, bias = False)
        self.register_buffer('tril', torch.tril(torch.ones(context_length, context_length)))
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        B, T, C = x.shape
        key = self.key(x) # (B,T,C); C/4 because we are keeping head size same as n_embed (for now)
        query = self.query(x) # (B,T,C)
        value = self.value(x) # (B,T,C)

        weights = query @ key.transpose(-2,-1) * C**-0.5 # # (B,T,C) * # (B,C,T) = (B,T,T)
        weights = weights.masked_fill(self.tril[:T,:T] == 0, float('-inf'))
        weights = F.softmax(weights, dim = -1) # (B,T,T)
        weights = self.dropout(weights)
        out = weights @ value # (W, T, C)
        return out

class MultiHeadAttention(nn.Module):
    """Class for Multi-head attention"""
    def __init__(self, num_heads, head_size):
        super().__init__()
        self.num_heads = num_heads
        self.head_size = head_size
        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])
        self.projection = nn.Linear(n_embed, n_embed)
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        out = torch.cat([h(x) for h in self.heads], dim = -1)
        out = self.projection(out)
        out = self.dropout(out)
        return out

class FeedForward(nn.Module):
    """Feedforward block to be used after attention"""
    def __init__(self, n_embed):
        super().__init__()
        self.net = nn.Sequential(nn.Linear(n_embed, 4 * n_embed),
                                 nn.ReLU(),
                                 nn.Linear(4 * n_embed, n_embed),
                                 nn.Dropout(dropout))

    def forward(self, x):
        out = self.net(x)
        return out

class Block(nn.Module):
    """A block of Multihead attention with feedforward layers, along with residual connections"""
    def __init__(self, n_embed, n_heads):
        super().__init__()
        self.n_embed = n_embed
        self.n_heads = n_heads
        self.head_size = n_embed//n_heads
        self.self_attention = MultiHeadAttention(self.n_heads, self.head_size)
        self.ffwd = FeedForward(self.n_embed)
        self.ln1 = nn.LayerNorm(n_embed)
        self.ln2 = nn.LayerNorm(n_embed)

    def forward(self, x):
        x = x + self.self_attention(self.ln1(x))
        x = x + self.ffwd(self.ln2(x))
        return x

class BiGramModel(L.LightningModule):
    """Putting it all together"""
    def __init__(self):
        super().__init__()
        self.token_embedding_table = nn.Embedding(vocab_size, n_embed)
        self.pos_embedding_table = nn.Embedding(context_length, n_embed)
        self.attention_ffwd_blocks = nn.Sequential(*[Block(n_embed, n_heads=n_heads) for _ in range(n_layers)])
        self.layernorm = nn.LayerNorm(n_embed)
        self.lm_head = nn.Linear(n_embed, vocab_size)

    def forward(self, idx, target = None):
        B, T = idx.shape
        token_emb = self.token_embedding_table(idx) # (B, T, n_embed);;   x: (B, T)
        pos_emb = self.pos_embedding_table(torch.arange(T, device = device)) # (T, n_embed)
        x = token_emb + pos_emb # (B, T, n_embed)
        x = self.attention_ffwd_blocks(x)
        x = self.layernorm(x)
        logits = self.lm_head(x) # (B, T, vocab_size)

        if target is None:
            return logits, None

        else: # Else block for generation ie target isn't available
            B, T, C = logits.shape # original shape; C is the embedding size
            logits = logits.view(B*T, C) # Reshaping because torch's cross entropy loss function expects tensors in a certain format;
            target = target.view(B * T) # reshaping due to the reason above
            loss = F.cross_entropy(logits, target)
            return logits, loss


    def training_step(self, batch, batch_idx=None):
        idx, target = batch
        logits, loss = self(idx, target)
        # if batch_idx % 50 == 0:
        #     print(f"batch: {batch_idx}; loss: {loss.item()}")

        self.log("train_loss", loss)
        return loss

    def validation_step(self, batch, batch_idx=None):
        wandb.define_metric("val_loss", summary="min")
        idx, target = batch
        logits, loss = self(idx, target)
        # print(loss.item())
        # print(f"batch idx: {batch_idx}; validation loss: {loss.item()}")
        self.log("val_loss", loss)
        return loss

    def test_step(self, batch, batch_idx=None):
        idx, target = batch
        logits, loss = self(idx, target)
        self.log("test_loss", loss)
        return loss

    def configure_optimizers(self):
        optimizer = torch.optim.Adam(self.parameters(), lr=learning_rate)
        return optimizer

    def generate(self, x, max_new_tokens = 100):
        # x is of shape (B, T) array of indices in the current context
        for i in range(max_new_tokens):
            x_cond = x[..., -context_length:] # Because if the input is more than context length, the attention won't work
            logits, loss = self(x_cond  )
            logits = logits[:, -1, :] # becomes (B, C)
            probs = F.softmax(logits, dim = 1) # (B, C)
            idx_next = torch.multinomial(probs, num_samples=1) # (B, 1)
            x = torch.cat((x, idx_next), dim = 1) # (B, T+1) as we concat B, T with B, 1 on axis = 1

        return x

def get_batch(data):
    """Function to get a batch of data with text and labels. Acts like a torch DataLoader"""
    idx = torch.randint(low = 0, high = len(data) - context_length, size=(batch_size,))
    x = torch.stack([data[i : i + context_length] for i in idx])
    y = torch.stack([data[i+1: i+ context_length + 1] for i in idx])
    dataset = torch.utils.data.TensorDataset(x, y)
    # print(dataset)
    data_loader = torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=True)
    return data_loader

def get_dataloaders(data):
    """Function to get a batch of data with text and labels. Acts like a torch DataLoader"""
    num_runs = len(data)//((context_length+1) * batch_size )
    x = data[ : (num_runs * context_length * batch_size)].view(-1, context_length)
    y = data[1 : (num_runs *context_length * batch_size) + 1 ].view(-1, context_length)
    dataset = torch.utils.data.TensorDataset(x, y)
    # print(dataset)
    data_loader = torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=True)
    return data_loader

train_loader = get_dataloaders(train_data)
validation_loader = get_dataloaders(val_data)

model = BiGramModel()
wandb_logger = WandbLogger(project="train-gpt1", log_model="all")
# log model only if `val_loss` decreases
checkpoint_callback = ModelCheckpoint(monitor="val_loss", mode="min", every_n_train_steps = 10)

trainer = L.Trainer(max_steps = max_iters, val_check_interval=50, logger=wandb_logger, callbacks=[checkpoint_callback] )
trainer.fit(model, train_dataloaders= train_loader, val_dataloaders= validation_loader)

trainer.validate(model, dataloaders=validation_loader)

wandb.finish()

# loading the best model from the checkpoint

run = wandb.init()
artifact = run.use_artifact('kushk/train-gpt1/model-f8pbbyq4:v28', type='model')
artifact_dir = artifact.download()

best_model = BiGramModel.load_from_checkpoint('/content/artifacts/model-f8pbbyq4:v28/model.ckpt')

# Generate the output
x_ = torch.zeros(size = (1,1), dtype=torch.long, device = device) # Creating a zero tensor as initial token
model = best_model.to(device)
print(decode(model.generate(x_, max_new_tokens=500)[0].tolist())) # generating the text